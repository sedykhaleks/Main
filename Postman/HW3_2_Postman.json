{
	"info": {
		"_postman_id": "8fd39503-4fbd-4d1a-ae57-532f97352174",
		"name": "HW3_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20907287"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос статус код 200",
							"",
							"pm.test(\"Server status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Проверить, что в body приходит правильный string",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Спарсить response body в json.",
							"",
							"var respData = pm.response.json();",
							"var u_salary_1_5_year = respData.u_salary_1_5_year",
							"var salary = respData.salary",
							"",
							"// 3. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Name hand verified\", function () {",
							"    pm.expect(respData.name).to.eql(\"Vova\");",
							"});",
							"",
							"// 4. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Age hand verified\", function () {",
							"    pm.expect(respData.age).to.eql(\"27\");",
							"});",
							"",
							"// 5. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Salary hand verified\", function () {",
							"    pm.expect(respData.salary).to.eql+(1001);",
							"});",
							"",
							"// 6. Спарсить request",
							"",
							"var reqData = request.data ",
							"",
							"// 7. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age request verified\", function () {",
							"    pm.expect(respData.age).to.eql(reqData.age);",
							"});",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name request verified\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 9. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary request verified\", function () {",
							"    pm.expect(respData.salary).to.eql+(reqData.salary);",
							"});",
							"",
							"// 10. Вывести в консоль параметр family из response.",
							"",
							"console.log(respData.family)",
							"",
							"// 11. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"u_salary_1_5_year\", function () {",
							"    pm.expect(reqData.salary*4).to.eql+(reqData.u_salary_1_5_year);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vova",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1001",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос cтатус код 200",
							"",
							"pm.test(\"Responce status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Спарсить response body в json.",
							"",
							"var respData = pm.response.json();",
							"",
							"// 3. Спарсить request.",
							"",
							"var reqData = pm.request.url.query;",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name request verified\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.get('name'));",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age request verified\", function () {",
							"    pm.expect(respData.age).to.eql(reqData.get('age'));",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary request verified\", function () {",
							"    pm.expect(respData.salary).to.eql(parseInt(reqData.get('salary')));",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"",
							"console.log(respData.family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"",
							"var dogData = respData.family.pets.dog",
							"",
							"pm.test(\"Dogs' name parameter is verified\", function () {",
							"    pm.expect(dogData).to.have.any.keys('name')",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Dogs' age parameter is verified\", function () {",
							"    pm.expect(dogData).to.have.any.keys('age')",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Dogs' name is verified\", function () {",
							"    pm.expect(dogData.name).to.eql('Luky')",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Dogs' age is verified\", function () {",
							"    pm.expect(dogData.age).to.eql(4)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Sasha&age=34&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос cтатус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2. Спарсить response body в json.",
							"",
							"var respData = pm.response.json();",
							"",
							"console.log(respData);",
							"",
							"// 3. Спарсить request.",
							"",
							"var reqData = pm.request.url.query;",
							"",
							"console.log(reqData);",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name request verified\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.get('name'));",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Age request verified\", function () {",
							"    pm.expect(respData.age).to.eql(parseInt(reqData.get('age')));",
							"});",
							"",
							"// 6. Вывести в консоль параметр salary из request.",
							"",
							"console.log(reqData.get('salary'));",
							"",
							"// 7. Вывести в консоль параметр salary из response.",
							"",
							"console.log(respData.salary);",
							"",
							"// 8. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log(respData.salary[0]);",
							"",
							"// 9. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(respData.salary[1]);",
							"",
							"// 10. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(respData.salary[2]);",
							"",
							"// 11. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary = Salary request \", function () {",
							"    pm.expect(respData.salary[0]).to.eql(parseInt(reqData.get(\"salary\")))",
							"});",
							"",
							"// 12. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary*2 = Salary request*2\", function () {",
							"    pm.expect(respData.salary[1]).to.eql + ((reqData.get('salary') * 2))",
							"});",
							"",
							"// 13. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Salary*3 = Salary request*3\", function () {",
							"    pm.expect(respData.salary[2]).to.eql + (reqData.get('salary') * 3)",
							"});",
							"",
							"// 14. Создать в окружении переменную name",
							"",
							"pm.environment.get(\"name\");",
							"",
							"// 15. Создать в окружении переменную age",
							"",
							"pm.environment.get(\"age\");",
							"",
							"// 16. Создать в окружении переменную salary",
							"",
							"pm.environment.get(\"salary\");",
							"",
							"// 17. Передать в окружение переменную name",
							"",
							"pm.environment.set(\"name\", respData.name);",
							"",
							"// 18. Передать в окружение переменную age",
							"",
							"pm.environment.set(\"age\", respData.age);",
							"",
							"// 19. Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"salary\", respData.salary[0]);",
							"",
							"// 20. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"for (var i = 0; respData.salary[i]; i++) {",
							"console.log(respData.salary[i])",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Igor&age=29&salary=5800",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "5800"
						}
					]
				}
			},
			"response": []
		}
	]
}